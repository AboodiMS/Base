// <auto-generated />
using System;
using Base.Modules.Companies.DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Base.Modules.Companies.DAL.Database.Migrations
{
    [DbContext(typeof(CompaniesDbContext))]
    [Migration("20220820112812_companies2")]
    partial class companies2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("companies")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Base.Modules.Companies.Domain.Entities.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string[]>("ActiveSections")
                        .HasColumnType("jsonb");

                    b.Property<string>("CompanyWork")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("IsRowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LastUpdateUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Company_Name")
                        .IsUnique()
                        .HasFilter("\"IsDeleted\" = false ");

                    b.ToTable("Companies", "companies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            ActiveSections = new[] { "Accounting" },
                            CompanyWork = "",
                            CreatedDate = new DateTime(2022, 8, 20, 14, 28, 12, 293, DateTimeKind.Local).AddTicks(1275),
                            CreatedUserId = new Guid("11111111-1111-1111-1111-111111111111"),
                            IsDeleted = false,
                            Name = "اسم الشركة"
                        });
                });

            modelBuilder.Entity("Base.Modules.Companies.Domain.Entities.Section", b =>
                {
                    b.Property<string>("CodeName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CodeName");

                    b.HasIndex(new[] { "Name" }, "IX_Section_Name")
                        .IsUnique();

                    b.ToTable("Sections", "companies");
                });

            modelBuilder.Entity("Base.Shared.Entities.ModuleSetting", b =>
                {
                    b.Property<string>("CodeName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<object>("Setting")
                        .HasColumnType("jsonb");

                    b.HasKey("CodeName");

                    b.ToTable("ModuleSettings", "companies");

                    b.HasData(
                        new
                        {
                            CodeName = "companies-modules",
                            Name = "Companies Managament"
                        });
                });

            modelBuilder.Entity("Base.Shared.Entities.TreePower", b =>
                {
                    b.Property<string>("CodeName")
                        .HasColumnType("text");

                    b.Property<string[]>("DependsOn")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsEndPoint")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Num")
                        .HasColumnType("integer");

                    b.Property<string>("ParentCodeName")
                        .HasColumnType("text");

                    b.HasKey("CodeName");

                    b.HasIndex("ParentCodeName");

                    b.ToTable("TreePowers", "companies");

                    b.HasData(
                        new
                        {
                            CodeName = "users-module",
                            IsEndPoint = false,
                            Name = "قسم المستخدمين",
                            Num = 1
                        },
                        new
                        {
                            CodeName = "users-module/Users",
                            IsEndPoint = false,
                            Name = "معلومات المستخدمين",
                            Num = 101,
                            ParentCodeName = "users-module"
                        },
                        new
                        {
                            CodeName = "users-module/Users/GetAll",
                            IsEndPoint = true,
                            Name = "عرض الكل",
                            Num = 10101,
                            ParentCodeName = "users-module/Users"
                        },
                        new
                        {
                            CodeName = "users-module/Users/GetById",
                            IsEndPoint = true,
                            Name = "عرض",
                            Num = 10102,
                            ParentCodeName = "users-module/Users"
                        },
                        new
                        {
                            CodeName = "users-module/Users/Add",
                            IsEndPoint = true,
                            Name = "اضافة",
                            Num = 10103,
                            ParentCodeName = "users-module/Users"
                        },
                        new
                        {
                            CodeName = "users-module/Users/Update",
                            DependsOn = new[] { "users-module/Users/GetById" },
                            IsEndPoint = true,
                            Name = "تعديل",
                            Num = 10104,
                            ParentCodeName = "users-module/Users"
                        },
                        new
                        {
                            CodeName = "users-module/Users/Delete",
                            DependsOn = new[] { "users-module/Users/GetById" },
                            IsEndPoint = true,
                            Name = "حذف",
                            Num = 10105,
                            ParentCodeName = "users-module/Users"
                        },
                        new
                        {
                            CodeName = "users-module/Users/ChangePowers",
                            DependsOn = new[] { "users-module/Users/GetById" },
                            IsEndPoint = true,
                            Name = "تعديل الصلاحيات",
                            Num = 10106,
                            ParentCodeName = "users-module/Users"
                        });
                });

            modelBuilder.Entity("Base.Shared.Entities.TreePower", b =>
                {
                    b.HasOne("Base.Shared.Entities.TreePower", "Parent")
                        .WithMany("SubTreePowers")
                        .HasForeignKey("ParentCodeName")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Base.Shared.Entities.TreePower", b =>
                {
                    b.Navigation("SubTreePowers");
                });
#pragma warning restore 612, 618
        }
    }
}
